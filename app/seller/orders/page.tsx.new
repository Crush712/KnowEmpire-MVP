'use client';

import type { NextPage } from "next";
import Image from "next/image";
import { useRouter } from "next/navigation";
import { useEffect, useState, useCallback } from "react";
import toast from "react-hot-toast";
import { formatCurrency } from "@/utils/helpers";
import { useMiniKit } from '@coinbase/onchainkit/minikit';
import { confirmDeliveryBySeller } from '@/utils/contractHelpers';
import { useAccount } from 'wagmi';
import { generateTrackingId } from '@/utils/tracking';
import Button from '@/ui/Button';
import BackButton from "@/ui/BackButton";

interface Order {
  id: string;
  status: 'pending' | 'shipped' | 'delivered' | 'cancelled';
  tracking_number: string | null;
  total_amount: number;
  escrow_id: string;
  product: {
    id: string;
    title: string;
    photos: string[];
    seller: {
      username: string;
      wallet_address: string;
    };
  };
}

const SellerOrderManagement: NextPage = () => {
  const [orders, setOrders] = useState<Order[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const { context } = useMiniKit();
  const { address, isConnected } = useAccount();
  const router = useRouter();

  const fetchOrders = useCallback(async () => {
    try {
      if (!context?.user?.fid) {
        toast.error('Please connect with Farcaster first');
        return;
      }

      setLoading(true);
      const response = await fetch(`/api/seller/orders?fid=${context.user.fid}`);
      if (!response.ok) throw new Error('Failed to fetch orders');
      const data = await response.json();
      
      // If there are no orders, redirect to empty state page
      if (!data || data.length === 0) {
        router.push('/seller/empty-orders');
        return;
      }
      
      setOrders(data || []);
    } catch (error) {
      console.error('Error fetching orders:', error);
      toast.error('Failed to load orders');
    } finally {
      setLoading(false);
    }
  }, [context?.user?.fid, router]);

  useEffect(() => {
    fetchOrders();
  }, [fetchOrders]);

  useEffect(() => {
    let pullStartY = 0;
    let pullMoveY = 0;
    const pullThreshold = 60; // pixels to pull before refresh

    const touchStart = (e: TouchEvent) => {
      const { scrollTop } = document.documentElement;
      if (scrollTop <= 0) {
        pullStartY = e.touches[0].screenY;
      }
    };

    const touchMove = (e: TouchEvent) => {
      if (pullStartY === 0 || refreshing) return;
      
      pullMoveY = e.touches[0].screenY - pullStartY;
      if (pullMoveY > 0 && pullMoveY < pullThreshold) {
        e.preventDefault();
      }
    };

    const touchEnd = async () => {
      if (pullMoveY >= pullThreshold && !refreshing) {
        setRefreshing(true);
        await fetchOrders();
        setRefreshing(false);
      }
      pullStartY = 0;
      pullMoveY = 0;
    };

    document.addEventListener('touchstart', touchStart);
    document.addEventListener('touchmove', touchMove, { passive: false });
    document.addEventListener('touchend', touchEnd);

    return () => {
      document.removeEventListener('touchstart', touchStart);
      document.removeEventListener('touchmove', touchMove);
      document.removeEventListener('touchend', touchEnd);
    };
  }, [refreshing, fetchOrders]);

  // The rest of your component remains the same...
  // Update tracking number
  const updateTrackingNumber = async (orderId: string, trackingNumber: string) => {
    try {
      if (!context?.user?.fid) {
        toast.error('Please connect with Farcaster first');
        return;
      }

      const response = await fetch(`/api/seller/orders/${orderId}/tracking`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          tracking_number: trackingNumber,
          fid: context.user.fid 
        })
      });

      if (!response.ok) throw new Error('Failed to update tracking number');
      
      // Update local state
      setOrders(orders.map(order => 
        order.id === orderId 
          ? { ...order, tracking_number: trackingNumber }
          : order
      ));

      toast.success('Tracking number updated');
    } catch (error) {
      console.error('Error updating tracking:', error);
      toast.error('Failed to update tracking number');
    }
  };

  // Mark as shipped
  const markAsShipped = async (orderId: string, escrowId: string) => {
    try {
      if (!context?.user?.fid) {
        toast.error('Please connect with Farcaster first');
        return;
      }

      if (!isConnected || !address) {
        toast.error('Please connect your wallet first');
        return;
      }

      setLoading(true);

      // Generate a unique tracking ID
      const trackingId = generateTrackingId();

      // First confirm delivery in the smart contract
      try {
        await confirmDeliveryBySeller(escrowId);
      } catch (error: any) {
        console.error('Contract error:', error);
        toast.error(error.message || 'Failed to update escrow state');
        return;
      }

      // Update both tracking number and status in the database
      const response = await fetch(`/api/seller/orders/${orderId}/status`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          status: 'shipped',
          tracking_number: trackingId,
          fid: context.user.fid 
        })
      });

      if (!response.ok) throw new Error('Failed to update order status');

      // Update local state
      setOrders(orders.map(order => 
        order.id === orderId 
          ? { ...order, status: 'shipped' as const, tracking_number: trackingId }
          : order
      ));

      toast.success('Order marked as shipped');
    } catch (error) {
      console.error('Error marking as shipped:', error);
      toast.error('Failed to mark order as shipped');
    } finally {
      setLoading(false);
    }
  };

  // Filter orders based on search term
  const filteredOrders = orders.filter(order => 
    order.product.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    order.id.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="flex flex-col min-h-screen bg-white">
      {refreshing && (
        <div className="fixed top-0 left-0 right-0 z-50 flex justify-center">
          <div className="bg-primary text-white text-sm py-1 px-4 rounded-b-lg">
            Refreshing...
          </div>
        </div>
      )}
      <section className="flex flex-col items-center min-h-screen pb-3 bg-white">
        <div className="w-[90%] max-w-lg flex flex-col flex-1 gap-y-1">
          <section className="sticky top-0 space-y-3 py-3 bg-white">
            <div className="flex flex-row justify-between items-center gap-2">
              <BackButton />
              <div className="flex flex-col items-center justify-center gap-y-1">
                <h1 className="text-xl font-bold">Order Management</h1>
              </div>
              <div className="w-[30px]" /> {/* Spacer for alignment */}
            </div>

            <div className="mt-6">
              <input
                type="text"
                placeholder="Search orders by title or ID..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full p-2 border rounded-lg"
              />
            </div>
          </section>

          {loading ? (
            <div className="text-center py-8">Loading orders...</div>
          ) : filteredOrders.length === 0 ? (
            <div className="text-center py-8">No orders found</div>
          ) : (
            <div className="w-full space-y-4">
              {filteredOrders.map((order) => (
                <div key={order.id} className="self-stretch rounded-[10px] bg-[#fff] border-[#989898] border-solid border-[1px] overflow-hidden flex flex-col items-start justify-start py-[18px] px-[19px] gap-5">
                  <div className="flex flex-col items-start justify-start gap-[9px]">
                    <div className="w-[322px] h-[120px] relative">
                      <Image
                        className="absolute top-[119px] left-[0px] w-[322px] h-px"
                        width={322}
                        height={1}
                        alt=""
                        src="/Vector-1.svg"
                      />
                      <div className="absolute top-[59px] left-[0px] w-[189px] flex flex-row items-center justify-between gap-5">
                        <div className="w-20 flex flex-col items-start justify-start gap-0.5">
                          <div className="self-stretch relative">Order ID</div>
                          <div className="self-stretch relative text-[13px] font-medium">
                            {order.id.slice(0, 8)}...
                          </div>
                        </div>
                        <div className="w-12 flex flex-col items-start justify-start gap-0.5">
                          <div className="self-stretch relative">Amount</div>
                          <div className="self-stretch relative text-[13px] font-medium text-[#16a34a]">
                            {formatCurrency(order.total_amount)}
                          </div>
                        </div>
                      </div>
                      <div className="absolute top-[0px] left-[0px] w-full h-11 text-[10px]">
                        <div className="absolute top-[0px] left-[245px] flex flex-row items-start justify-start">
                          <div className={`w-[77px] rounded-[10px] ${
                            order.status === 'pending' ? 'bg-[#fef9c3] text-[#925f21]' :
                            order.status === 'shipped' ? 'bg-[#dbeafe] text-[#1e43be]' :
                            'bg-[#dcfce7] text-[#166534]'
                          } flex flex-col items-start justify-start py-[3px] px-1.5 box-border`}>
                            <div className="flex flex-row items-center justify-start gap-[3px]">
                              <Image
                                className="h-[15px] w-[13.9px] relative"
                                width={13.9}
                                height={15}
                                alt=""
                                src={
                                  order.status === 'pending' ? '/Vector.svg' :
                                  order.status === 'shipped' ? '/Vector-2.svg' :
                                  '/check.svg'
                                }
                              />
                              <div className="relative capitalize">{order.status}</div>
                            </div>
                          </div>
                        </div>
                        <div className="absolute top-[0px] left-[0px] w-full flex flex-row items-start justify-start gap-[5px] h-full text-sm text-[#414141]">
                          <Image
                            className="h-11 w-10 relative object-cover"
                            width={40}
                            height={44}
                            alt={order.product.title}
                            src={order.product.photos[0]}
                          />
                          <div className="w-[140px] relative font-semibold inline-block shrink-0">
                            {order.product.title}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="w-[322px] flex flex-col items-start justify-start gap-[5px] z-[1] text-[#6b88b5]">
                    <div className="self-stretch relative">Tracking ID:</div>
                    <div className="self-stretch rounded-[5px] bg-[#f1f1f1] border-[#989898] border-solid border-[1px] flex flex-row items-center justify-between p-2.5">
                      <input
                        className="w-full [border:none] [outline:none] bg-[transparent] h-[15px] flex flex-row items-center justify-start font-[Poppins] text-[10px] text-[#989898] min-w-[67px]"
                        placeholder="Enter tracking number"
                        type="text"
                        value={order.tracking_number || ''}
                        onChange={(e) => updateTrackingNumber(order.id, e.target.value)}
                      />
                    </div>
                  </div>
                  {order.status === 'pending' && (
                    <>
                      <Image
                        className="w-[322px] h-px relative max-h-full"
                        width={322}
                        height={1}
                        alt=""
                        src="/Vector-1.svg"
                      />
                      <button 
                        className="cursor-pointer [border:none] pt-[9px] px-5 pb-2 bg-[#2563eb] w-[322px] rounded-[10px] overflow-hidden flex flex-row items-start justify-center box-border disabled:opacity-50 disabled:cursor-not-allowed"
                        onClick={() => markAsShipped(order.id, order.escrow_id)}
                        disabled={loading || !isConnected || !context?.user?.fid}
                      >
                        <div className="flex flex-row items-center justify-start gap-2.5">
                          <Image
                            className="h-[18px] w-[22px] relative"
                            width={22}
                            height={18}
                            alt=""
                            src="/Vector-11.svg"
                          />
                          <div className="relative text-xs font-semibold font-[Poppins] text-[#fff] text-left">
                            Mark as shipped
                          </div>
                        </div>
                      </button>
                    </>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </section>
    </div>
  );
};

export default SellerOrderManagement;
